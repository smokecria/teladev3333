import mysql from 'mysql2/promise';

// Configura√ß√£o de conex√£o otimizada para VPS Windows
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  port: Number(process.env.DB_PORT) || 3306,
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_DATABASE || 'pcshop',
  charset: 'utf8mb4',
  timezone: '+00:00',
  acquireTimeout: 60000,
  timeout: 60000,
  reconnect: true,
  multipleStatements: false
};

// Pool de conex√µes para melhor performance
let pool: mysql.Pool | null = null;

function createPool() {
  if (!pool) {
    pool = mysql.createPool({
      ...dbConfig,
      waitForConnections: true,
      connectionLimit: 10,
      queueLimit: 0,
      acquireTimeout: 60000,
      timeout: 60000
    });
  }
  return pool;
}

// Fun√ß√£o para obter conex√£o do pool
export async function getConnection() {
  try {
    const connectionPool = createPool();
    const connection = await connectionPool.getConnection();
    return connection;
  } catch (error) {
    console.error('Erro ao conectar com o banco de dados:', error);
    throw error;
  }
}

// Fun√ß√£o para criar o banco de dados se n√£o existir
export async function createDatabaseIfNotExists() {
  let connection;
  try {
    // Conectar sem especificar database
    connection = await mysql.createConnection({
      host: dbConfig.host,
      port: dbConfig.port,
      user: dbConfig.user,
      password: dbConfig.password,
      charset: 'utf8mb4',
      timezone: '+00:00'
    });

    await connection.execute(`CREATE DATABASE IF NOT EXISTS \`${dbConfig.database}\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci`);
    console.log('‚úÖ Database criado/verificado com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao criar database:', error);
    throw error;
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

// Fun√ß√£o que garante que todas as tabelas existem
export async function ensureTablesExist() {
  let connection;
  try {
    connection = await getConnection();

    // Tabela de produtos com √≠ndices otimizados
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS products (
        id VARCHAR(36) PRIMARY KEY,
        name TEXT NOT NULL,
        modelo VARCHAR(255) DEFAULT '',
        categoria VARCHAR(255) DEFAULT '',
        fabricante VARCHAR(255) DEFAULT '',
        price DECIMAL(10, 2) NOT NULL DEFAULT 0.00,
        img TEXT DEFAULT '',
        img2 TEXT DEFAULT '',
        garantia VARCHAR(255) DEFAULT '',
        specs JSON,
        promo BOOLEAN DEFAULT FALSE,
        pathName TEXT,
        tags JSON,
        destaque BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_categoria (categoria),
        INDEX idx_promo (promo),
        INDEX idx_destaque (destaque),
        INDEX idx_price (price),
        INDEX idx_created_at (created_at),
        FULLTEXT idx_search (name, modelo, fabricante)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    `);

    // Tabela de pedidos
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS orders (
        id VARCHAR(36) PRIMARY KEY,
        customer_name VARCHAR(255) NOT NULL,
        customer_email VARCHAR(255) NOT NULL,
        customer_cpf VARCHAR(14) NOT NULL,
        customer_address JSON,
        items JSON NOT NULL,
        total DECIMAL(10, 2) NOT NULL,
        payment_method ENUM('credit_card', 'pix') NOT NULL,
        payment_status ENUM('pending', 'completed', 'failed') DEFAULT 'pending',
        card_data JSON,
        pix_data JSON,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_payment_status (payment_status),
        INDEX idx_payment_method (payment_method),
        INDEX idx_created_at (created_at),
        INDEX idx_customer_email (customer_email)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    `);

    // Tabela de configura√ß√µes da loja
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS store_config (
        id INT PRIMARY KEY AUTO_INCREMENT,
        config_key VARCHAR(255) UNIQUE NOT NULL,
        config_value JSON NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_config_key (config_key)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    `);

    // Tabela de usu√°rios admin
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS admin_users (
        id INT PRIMARY KEY AUTO_INCREMENT,
        username VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        email VARCHAR(255),
        last_login TIMESTAMP NULL,
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_username (username),
        INDEX idx_is_active (is_active)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    `);

    // Tabela de logs do sistema
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS system_logs (
        id INT PRIMARY KEY AUTO_INCREMENT,
        action VARCHAR(255) NOT NULL,
        entity_type VARCHAR(100),
        entity_id VARCHAR(36),
        user_id INT,
        details JSON,
        ip_address VARCHAR(45),
        user_agent TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        INDEX idx_action (action),
        INDEX idx_entity (entity_type, entity_id),
        INDEX idx_created_at (created_at),
        INDEX idx_user_id (user_id)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    `);

    // Tabela de sess√µes (para controle de login)
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS user_sessions (
        id VARCHAR(36) PRIMARY KEY,
        user_id INT NOT NULL,
        ip_address VARCHAR(45),
        user_agent TEXT,
        expires_at TIMESTAMP NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        INDEX idx_user_id (user_id),
        INDEX idx_expires_at (expires_at),
        FOREIGN KEY (user_id) REFERENCES admin_users(id) ON DELETE CASCADE
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    `);

    console.log('‚úÖ Tabelas criadas/verificadas com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao criar tabelas:', error);
    throw error;
  } finally {
    if (connection) {
      connection.release();
    }
  }
}

// Fun√ß√£o para migrar produtos do listaItems para o banco
export async function migrateProductsFromList() {
  let connection;
  try {
    connection = await getConnection();
    
    // Verificar se j√° existem produtos no banco
    const [rows] = await connection.execute('SELECT COUNT(*) as count FROM products');
    const count = (rows as any)[0].count;
    
    if (count > 0) {
      console.log('‚úÖ Produtos j√° existem no banco de dados');
      return;
    }

    // Importar produtos do arquivo listaItems
    let itemsList;
    try {
      itemsList = require('../listaItems').default;
    } catch (error) {
      console.log('‚ö†Ô∏è Arquivo listaItems n√£o encontrado, criando produtos de exemplo...');
      itemsList = createSampleProducts();
    }
    
    console.log(`üîÑ Migrando ${itemsList.length} produtos para o banco de dados...`);
    
    for (const item of itemsList) {
      try {
        await connection.execute(`
          INSERT INTO products (
            id, name, modelo, categoria, fabricante, price, img, img2, 
            garantia, specs, promo, pathName, tags, destaque
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        `, [
          item.id || generateId(),
          item.name || 'Produto sem nome',
          item.modelo || '',
          item.categoria || 'geral',
          item.fabricante || '',
          item.pPrazo || item.price || 0,
          item.img || '/images/sample.jpg',
          item.img2 || '/images/sample.jpg',
          item.garantia || '12 meses',
          JSON.stringify(item.specs || []),
          item.promo || false,
          item.pathName || generatePathName(item.name || 'produto'),
          JSON.stringify(item.tags || []),
          item.destaque || false
        ]);
      } catch (itemError) {
        console.warn(`‚ö†Ô∏è Erro ao migrar produto ${item.name}:`, itemError.message);
      }
    }

    console.log(`‚úÖ ${itemsList.length} produtos migrados com sucesso para o banco de dados`);
  } catch (error) {
    console.error('‚ùå Erro ao migrar produtos:', error);
    throw error;
  } finally {
    if (connection) {
      connection.release();
    }
  }
}

// Fun√ß√£o para criar produtos de exemplo se listaItems n√£o existir
function createSampleProducts() {
  return [
    {
      id: 'sample-1',
      name: 'Processador Intel Core i5-12400F',
      modelo: 'i5-12400F',
      categoria: 'processador',
      fabricante: 'Intel',
      pPrazo: 899.99,
      img: '/images/sample.jpg',
      img2: '/images/sample.jpg',
      garantia: '36 meses',
      specs: [{"Especifica√ß√µes": ["6 n√∫cleos", "12 threads", "2.5GHz base"]}],
      promo: false,
      pathName: 'intel-core-i5-12400f',
      tags: ['intel', 'processador', 'gaming'],
      destaque: true
    },
    {
      id: 'sample-2',
      name: 'Placa de V√≠deo RTX 3060 Ti',
      modelo: 'RTX 3060 Ti',
      categoria: 'placa-de-video',
      fabricante: 'NVIDIA',
      pPrazo: 2499.99,
      img: '/images/sample.jpg',
      img2: '/images/sample.jpg',
      garantia: '24 meses',
      specs: [{"Especifica√ß√µes": ["8GB GDDR6", "Ray Tracing", "DLSS"]}],
      promo: true,
      pathName: 'rtx-3060-ti',
      tags: ['nvidia', 'gpu', 'gaming'],
      destaque: true
    }
  ];
}

// Fun√ß√£o para gerar ID √∫nico
function generateId() {
  return 'prod-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
}

// Fun√ß√£o para gerar pathName
function generatePathName(name: string) {
  return name.toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/[^a-z0-9\s]/g, '')
    .replace(/\s+/g, '-')
    .substring(0, 100);
}

// Fun√ß√£o para inserir configura√ß√µes padr√£o da loja
export async function insertDefaultStoreConfig() {
  let connection;
  try {
    connection = await getConnection();
    
    // Verificar se j√° existem configura√ß√µes
    const [rows] = await connection.execute('SELECT COUNT(*) as count FROM store_config');
    const count = (rows as any)[0].count;
    
    if (count > 0) {
      console.log('‚úÖ Configura√ß√µes da loja j√° existem');
      return;
    }

    // Inserir configura√ß√µes padr√£o
    const defaultConfigs = [
      {
        key: 'store_info',
        value: {
          storeName: 'PC Shop',
          storeAddress: {
            street: 'Rua xxxxxxxxxx',
            number: '100',
            neighborhood: 'Bairro xxxxxxx',
            city: 'S√£o Paulo',
            state: 'SP',
            zipCode: '11111-111'
          },
          workingHours: {
            weekdays: 'Segunda √† Sexta-feira de 8:00h √†s 18h',
            saturday: 'Fechado devido ao Coronav√≠rus (COVID-19)',
            sunday: 'Fechado'
          },
          contact: {
            whatsapp: '',
            email: ''
          }
        }
      },
      {
        key: 'pix_config',
        value: {
          clientId: '',
          clientSecret: '',
          isActive: false
        }
      }
    ];

    for (const config of defaultConfigs) {
      await connection.execute(
        'INSERT INTO store_config (config_key, config_value) VALUES (?, ?)',
        [config.key, JSON.stringify(config.value)]
      );
    }

    console.log('‚úÖ Configura√ß√µes padr√£o da loja inseridas com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao inserir configura√ß√µes padr√£o:', error);
    throw error;
  } finally {
    if (connection) {
      connection.release();
    }
  }
}

// Fun√ß√£o para criar usu√°rio admin padr√£o
export async function createDefaultAdmin() {
  let connection;
  try {
    connection = await getConnection();
    
    // Verificar se j√° existe um admin
    const [rows] = await connection.execute('SELECT COUNT(*) as count FROM admin_users');
    const count = (rows as any)[0].count;
    
    if (count > 0) {
      console.log('‚úÖ Usu√°rio admin j√° existe');
      return;
    }

    // Criar hash simples para a senha (em produ√ß√£o, use bcrypt)
    const crypto = require('crypto');
    const passwordHash = crypto.createHash('sha256').update('admin123').digest('hex');

    await connection.execute(
      'INSERT INTO admin_users (username, password_hash, email, is_active) VALUES (?, ?, ?, ?)',
      ['admin', passwordHash, 'admin@pcshop.com', true]
    );

    console.log('‚úÖ Usu√°rio admin padr√£o criado (username: admin, password: admin123)');
  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rio admin:', error);
    throw error;
  } finally {
    if (connection) {
      connection.release();
    }
  }
}

// Fun√ß√£o para fechar pool de conex√µes
export async function closePool() {
  if (pool) {
    await pool.end();
    pool = null;
  }
}